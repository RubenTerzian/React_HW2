{"version":3,"sources":["audio/clickButton.mp3","App.jsx","reportWebVitals.js","index.js"],"names":["App","useState","time","setTime","timeForShowArray","setTimeForShowArray","counter","setCounter","startBtnIsActive","setStartBtnIsActive","timerOn","setTimerOn","useSound","clickButton","play","useEffect","intervalId","timeConfig","hours","minutes","seconds","Math","floor","setInterval","timeFormat","clearInterval","timeListArrayFromLocalStorage","localStorage","JSON","parse","className","onClick","stringify","map","index","length","clear","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19845c7e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/clickButton.032b32d7.mp3\";","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport useSound from 'use-sound';\nimport clickButton from './audio/clickButton.mp3';\n\nconst App = () =>{\n  const [time, setTime] = useState(\"00:00:00\");\n  const [timeForShowArray, setTimeForShowArray] = useState([]);\n  const [counter, setCounter] = useState(1);\n  const [startBtnIsActive, setStartBtnIsActive] = useState(true);\n  const [timerOn, setTimerOn] = useState(false);\n\n  const [play] = useSound(clickButton);\n\n  useEffect(()=>{\n    let intervalId;\n    if(timerOn){\n\n      const timeConfig ={\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      };\n\n      if(counter/60 < 1){\n        // seconds\n        timeConfig.seconds = counter;\n      }else{\n        if(counter/(60*60) < 1){\n          timeConfig.minutes = Math.floor(counter/60);\n          timeConfig.seconds = counter%(60);\n        }else{\n          timeConfig.hours = Math.floor(counter/(60*60));\n          timeConfig.minutes = Math.floor(counter/60%60);\n          timeConfig.seconds = counter%60;\n        }\n      }\n\n      intervalId = setInterval(()=>{\n        const timeFormat = \n             (timeConfig.hours<10 ? '0' + timeConfig.hours : timeConfig.hours) + ':' + \n             (timeConfig.minutes<10 ? '0' + timeConfig.minutes : timeConfig.minutes) + ':' + \n             (timeConfig.seconds<10 ? '0' + timeConfig.seconds : timeConfig.seconds);\n        setTime(timeFormat);\n        setCounter(counter+1);\n      },1000);\n    }\n    return () =>{\n        clearInterval(intervalId);\n    };\n  }, [timerOn, setTime, counter]);\n\n  const timeListArrayFromLocalStorage = localStorage.timeForShowArray ? JSON.parse(localStorage.timeForShowArray) : localStorage.timeForShowArray;\n\n  /* jshint ignore:start */\n  return  (\n    <div className=\"wraper\">\n      <h1>{time}</h1>\n      <div className=\"btn_section\">\n    \n        {/* START/CONTINUE */}\n        <button \n        className={startBtnIsActive ? 'btn_start' : ('btn_continue')}\n        onClick={()=>{\n          setStartBtnIsActive(true)\n          setTimerOn(true)\n          play()\n        }}>{startBtnIsActive ? \"Start\" : \"Continue\"}</button>\n        \n        {/* STOP */}\n        <button \n        className=\"btn_stop\"\n        onClick={()=> {\n            timerOn && setStartBtnIsActive(!startBtnIsActive)\n            timerOn && setTimerOn(!timerOn)\n            if(timerOn){\n              setTimeForShowArray([time, ...timeForShowArray]);\n              localStorage.timeForShowArray = JSON.stringify([time, ...timeForShowArray]);\n            }\n          play()\n        }\n        }\n        >Stop</button>\n\n        {/* RESET */}\n        <button \n        className=\"btn_reset\"\n        onClick={()=>{\n          setStartBtnIsActive(true)\n          timerOn && setTimerOn(!timerOn)\n          setCounter(1)\n          setTime(\"00:00:00\")\n          if(timerOn){\n            setTimeForShowArray([time, ...timeForShowArray]);\n            localStorage.timeForShowArray = JSON.stringify([time, ...timeForShowArray]);\n          }\n          play()\n        }}\n        >Reset</button>\n      </div>\n      <div className=\"time_list\">\n        {\n          timeListArrayFromLocalStorage\n           ?\n           JSON.parse(localStorage.timeForShowArray).map( (time, index) =>{\n            if(index<=3){\n              return <p key={\"time_list\"+index}>{time}</p>\n            }\n          })\n            :\n            timeForShowArray.map( (time, index) =>{\n              if(index<=3){\n                return <p key={\"time_list\"+index}>{time}</p>\n              }\n            })\n            \n        }\n        { (timeForShowArray.length || timeListArrayFromLocalStorage) &&\n          <button\n          onClick = {()=>{\n          localStorage.clear()\n          setTimeForShowArray([])\n          play()\n        }}\n        >Clear time list</button>\n        }\n        \n      </div>\n    </div>\n  )\n  /* jshint ignore:end */\n\n};\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// jshint ignore:start\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}